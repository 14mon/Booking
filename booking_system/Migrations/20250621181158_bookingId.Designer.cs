// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using booking_system.Data;

#nullable disable

namespace booking_system.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250621181158_bookingId")]
    partial class bookingId
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("booking_system.Models.Class", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsFull")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxParticipants")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RequiredCredit")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("booking_system.Models.ClassBooking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("BookAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CancelledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserCreditId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("UserCreditId");

                    b.HasIndex("UserId");

                    b.ToTable("ClassBookings");
                });

            modelBuilder.Entity("booking_system.Models.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("booking_system.Models.GatewayRawEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CallbackResponsePayload")
                        .HasColumnType("json");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GateWayOrderId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RequestPayload")
                        .HasColumnType("json");

                    b.Property<string>("TranResponsePayload")
                        .HasColumnType("json");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("GatewayRawEvents");
                });

            modelBuilder.Entity("booking_system.Models.Package", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Credit")
                        .HasColumnType("integer");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("ExpiredDuration")
                        .HasColumnType("integer");

                    b.Property<Guid>("GatewayId")
                        .HasColumnType("uuid");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PlanId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("TermsAndCondition")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("GatewayId");

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("booking_system.Models.PaymentGateway", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("PaymentGateways");
                });

            modelBuilder.Entity("booking_system.Models.Refund", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BookingId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<float>("RefundAmount")
                        .HasColumnType("real");

                    b.Property<string>("RefundCurrency")
                        .HasColumnType("text");

                    b.Property<DateTime>("RefundedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.ToTable("Refunds");
                });

            modelBuilder.Entity("booking_system.Models.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<string>("AppliedPlan")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ExpiredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("GateRefCode")
                        .HasColumnType("text");

                    b.Property<string>("GateWayOrderId")
                        .HasColumnType("text");

                    b.Property<Guid>("GateWayRawEventId")
                        .HasColumnType("uuid");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uuid");

                    b.Property<string>("Platform")
                        .HasColumnType("text");

                    b.Property<string>("RequestedPlan")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GateWayRawEventId")
                        .IsUnique();

                    b.HasIndex("PackageId");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("booking_system.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreditBalance")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirebaseUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("boolean");

                    b.Property<string>("LoginType")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("text");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("VerificationToken")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("booking_system.Models.UserCreditHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreditAmount")
                        .HasColumnType("integer");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("RefundId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RefundId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("UserCreditHistories");
                });

            modelBuilder.Entity("booking_system.Models.Class", b =>
                {
                    b.HasOne("booking_system.Models.Country", "Country")
                        .WithMany("Classes")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("booking_system.Models.ClassBooking", b =>
                {
                    b.HasOne("booking_system.Models.Class", "Class")
                        .WithMany("ClassBookings")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("booking_system.Models.UserCreditHistory", "UserCreditHistory")
                        .WithMany("ClassBookings")
                        .HasForeignKey("UserCreditId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("booking_system.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("User");

                    b.Navigation("UserCreditHistory");
                });

            modelBuilder.Entity("booking_system.Models.Package", b =>
                {
                    b.HasOne("booking_system.Models.PaymentGateway", "PaymentGateway")
                        .WithMany("Packages")
                        .HasForeignKey("GatewayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentGateway");
                });

            modelBuilder.Entity("booking_system.Models.PaymentGateway", b =>
                {
                    b.HasOne("booking_system.Models.Country", "Country")
                        .WithMany("PaymentGateways")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("booking_system.Models.Refund", b =>
                {
                    b.HasOne("booking_system.Models.ClassBooking", "ClassBooking")
                        .WithOne("Refund")
                        .HasForeignKey("booking_system.Models.Refund", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ClassBooking");
                });

            modelBuilder.Entity("booking_system.Models.Transaction", b =>
                {
                    b.HasOne("booking_system.Models.GatewayRawEvent", "GatewayRawEvent")
                        .WithOne("Transaction")
                        .HasForeignKey("booking_system.Models.Transaction", "GateWayRawEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("booking_system.Models.Package", "Package")
                        .WithMany("Transactions")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("booking_system.Models.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GatewayRawEvent");

                    b.Navigation("Package");

                    b.Navigation("User");
                });

            modelBuilder.Entity("booking_system.Models.User", b =>
                {
                    b.HasOne("booking_system.Models.Country", "Country")
                        .WithMany("Users")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("booking_system.Models.UserCreditHistory", b =>
                {
                    b.HasOne("booking_system.Models.Refund", "Refund")
                        .WithOne("UserCreditHistory")
                        .HasForeignKey("booking_system.Models.UserCreditHistory", "RefundId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("booking_system.Models.User", "User")
                        .WithMany("UserCreditHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Refund");

                    b.Navigation("User");
                });

            modelBuilder.Entity("booking_system.Models.Class", b =>
                {
                    b.Navigation("ClassBookings");
                });

            modelBuilder.Entity("booking_system.Models.ClassBooking", b =>
                {
                    b.Navigation("Refund");
                });

            modelBuilder.Entity("booking_system.Models.Country", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("PaymentGateways");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("booking_system.Models.GatewayRawEvent", b =>
                {
                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("booking_system.Models.Package", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("booking_system.Models.PaymentGateway", b =>
                {
                    b.Navigation("Packages");
                });

            modelBuilder.Entity("booking_system.Models.Refund", b =>
                {
                    b.Navigation("UserCreditHistory");
                });

            modelBuilder.Entity("booking_system.Models.User", b =>
                {
                    b.Navigation("Transactions");

                    b.Navigation("UserCreditHistories");
                });

            modelBuilder.Entity("booking_system.Models.UserCreditHistory", b =>
                {
                    b.Navigation("ClassBookings");
                });
#pragma warning restore 612, 618
        }
    }
}
